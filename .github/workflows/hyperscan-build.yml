# This is a basic workflow to help you get started with Actions

name: hyperscan-build

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set git to autocrlf          
        run: git config --global core.autocrlf input

      - name: Checkout w/ submodules and autocrlf
        uses: actions/checkout@v3
        with:
          submodules: true

      # Setup the dependencies for building.
      - name: Setup build using bash in cygwin
        shell: cmd
        run: |
          echo -- pwd working dir --
          pwd
          echo -- env.GITHUB_WORKSPACE --
          echo %GITHUB_WORKSPACE%
          echo -- show dir --
          dir
          echo -- 7 unzip ragel --
          7z x ragel-6.10.tar.gz
          7z x ragel-6.10.tar
          7z x pcre-8.45.zip 
          echo -- Force rename to pcre-8.41 on move otherwise build will error out
          move pcre-8.45 hyperscan\pcre-8.41
          7z x sqlite-amalgamation-3390000.zip
          move sqlite-amalgamation-3390000 hyperscan\sqlite3
          7z x -ohyperscan/ boost_1_79_0.7z
          echo -- show dir --
          dir
          echo -- show ragel dir --
          dir ragel-6.10
          echo -- show hyperscan dir --
          dir hyperscan

      - name: Install Cygwin Action
        uses: egor-tensin/setup-cygwin@v3
        with:
          platform: x64
          packages: make gcc-core
      
      # Alternatively, you can set Cygwin's bash as the shell to use:
      - name: Run cygwin bash shell
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        run: |
          # This is a real bash script!
          echo -- cd GITHUB_WORKSPACE
          echo $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE
          echo -
          echo -- Add PATH:"/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin/"
          echo -
          export PATH=$PATH:"/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin/"
          echo -- ls directory
          ls -la
          echo -- cd ragel
          cd ragel-6.10
          echo -- ./configure
          ./configure
          echo -- make ragel
          make
          make install
          echo -- ls result
          pwd
          ls -la
          echo -- Start hyperscan config
          echo -- cd ../hyperscan
          cd ../hyperscan
          echo -- mkdir build
          mkdir build
          mkdir ../output_libs
          pwd
          ls -la
          echo -
          echo -- cmake -G "Visual Studio 15 2017 Win64" -DBOOST_ROOT=./boost_1_79_0/ -DCMAKE_BUILD_TYPE=MinSizeRel
          echo -
          CMake -G "Visual Studio 15 2017 Win64" -DBOOST_ROOT=./boost_1_79_0/ -DCMAKE_BUILD_TYPE=MinSizeRel
          echo -
          echo -- msbuild the hyperscan.sln -t:Rebuild -p:Configuration=MinSizeRel -p:Platform=x64
          echo -
          export _CL_=/MT
          MSBuild.exe hyperscan.sln -t:Rebuild -p:Configuration=MinSizeRel -p:Platform=x64 _CL_=/MT
          echo -- Output results
          ls -la lib
          mv lib/chimera.lib ../output_libs/chimera64MT.lib
          mv lib/hs_runtime.lib ../output_libs/hs_runtime64MT.lib
          mv lib/hs.lib ../output_libs/hs64MT.lib
          mv lib/pcre.lib ../output_libs/pcre64MT.lib
          echo -
          echo -- msbuild the hyperscan.sln -t:Rebuild -p:Configuration=MinSizeRel -p:Platform=x64
          echo -
          export _CL_=/MTd
          MSBuild.exe hyperscan.sln -t:Rebuild -p:Configuration=MinSizeRel -p:Platform=x64 _CL_=/MTd
          echo -- Output results
          ls -la lib
          mv lib/chimera.lib ../output_libs/chimera64MTd.lib
          mv lib/hs_runtime.lib ../output_libs/hs_runtime64MTd.lib
          mv lib/hs.lib ../output_libs/hs64MTd.lib
          mv lib/pcre.lib ../output_libs/pcre64MTd.lib
          echo -
          echo -- CMake -G "Visual Studio 15 2017 Win32" -DBOOST_ROOT=./boost_1_79_0/ -DCMAKE_BUILD_TYPE=MinSizeRel
          echo -
          rm CMakeCache.txt
          unset _CL_
          CMake -G "Visual Studio 15 2017 Win32" -DBOOST_ROOT=./boost_1_79_0/ -DCMAKE_BUILD_TYPE=MinSizeRel
          echo -
          echo -- msbuild the hyperscan.sln -t:Rebuild -p:Configuration=MinSizeRel -p:Platform=Win32 _CL_=/MT
          echo -
          export _CL_=/MT
          MSBuild.exe hyperscan.sln -t:Rebuild -p:Configuration=MinSizeRel -p:Platform=Win32
          echo -- Output results
          ls -la lib
          mv lib/chimera.lib ../output_libs/chimera32MT.lib
          mv lib/hs_runtime.lib ../output_libs/hs_runtime32MT.lib
          mv lib/hs.lib ../output_libs/hs32MT.lib
          mv lib/pcre.lib ../output_libs/pcre32MT.lib
          echo -
          echo -- msbuild the hyperscan.sln -t:Rebuild -p:Configuration=MinSizeRel -p:Platform=Win32 _CL_=/MTd
          echo -
          export _CL_=/MTd
          MSBuild.exe hyperscan.sln -t:Rebuild -p:Configuration=MinSizeRel -p:Platform=Win32
          echo -- Output results
          ls -la lib
          mv lib/chimera.lib ../output_libs/chimera32MTd.lib
          mv lib/hs_runtime.lib ../output_libs/hs_runtime32MTd.lib
          mv lib/hs.lib ../output_libs/hs32MTd.lib
          mv lib/pcre.lib ../output_libs/pcre32MTd.lib
          echo -
          echo -- Final Results
          echo -
          cd ..
          ls -la output_libs/
          
# Now we can upload the output_libs artifacts as the final build.
# Versioning?
          
      - name: Upload output_libs 
        uses: actions/upload-artifact@v2
        with:
          name: hyperscan_v5.4.0
          path: output_libs\
        
 
